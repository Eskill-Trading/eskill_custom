[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Journal Entry",
  "modified": "2021-06-24 11:15:09.318856",
  "name": "Journal Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Journal Entry', {\n\tbefore_submit(frm) {\n\t\tget_bid_rate(frm);\n\t}\n});\n\nfunction get_bid_rate(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.auction_rate_lookup\",\n        args: {\n            posting_date: frm.doc.posting_date\n        },\n        callback: function(data) {\n            frm.set_value(\"auction_bid_rate\", data.message);\n        }\n    });\n    console.log(\"Got bid rate.\");\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Stock Reconciliation",
  "modified": "2021-06-24 11:14:44.416345",
  "name": "Stock Reconciliation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Reconciliation', {\n\tbefore_submit(frm) {\n\t\tget_bid_rate(frm);\n\t}\n});\n\nfunction get_bid_rate(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.auction_rate_lookup\",\n        args: {\n            posting_date: frm.doc.posting_date\n        },\n        callback: function(data) {\n            frm.set_value(\"auction_bid_rate\", data.message);\n        }\n    });\n    console.log(\"Got bid rate.\");\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Stock Entry",
  "modified": "2021-06-24 11:14:21.560232",
  "name": "Stock Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Stock Entry', {\n\tbefore_submit(frm) {\n\t\tget_bid_rate(frm);\n\t}\n});\n\nfunction get_bid_rate(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.auction_rate_lookup\",\n        args: {\n            posting_date: frm.doc.posting_date\n        },\n        callback: function(data) {\n            frm.set_value(\"auction_bid_rate\", data.message);\n        }\n    });\n    console.log(\"Got bid rate.\");\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Invoice",
  "modified": "2021-06-24 11:12:57.054389",
  "name": "Purchase Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\tbefore_submit(frm) {\n\t\tget_bid_rate(frm);\n\t}\n});\n\nfunction get_bid_rate(frm) {\n    if (frm.doc.currency != \"ZWD\") {\n        frappe.call({\n            method: \"eskill_custom.api.auction_rate_lookup\",\n            args: {\n                posting_date: frm.doc.posting_date\n            },\n            callback: function(data) {\n                frm.set_value(\"auction_bid_rate\", data.message);\n            }\n        });\n        console.log(\"Got bid rate.\");\n    }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Receipt",
  "modified": "2021-06-24 11:12:28.336427",
  "name": "Purchase Receipt-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\tbefore_submit(frm) {\n\t\tget_bid_rate(frm);\n\t}\n});\n\nfunction get_bid_rate(frm) {\n    if (frm.doc.currency != \"ZWD\") {\n        frappe.call({\n            method: \"eskill_custom.api.auction_rate_lookup\",\n            args: {\n                posting_date: frm.doc.posting_date\n            },\n            callback: function(data) {\n                frm.set_value(\"auction_bid_rate\", data.message);\n            }\n        });\n        console.log(\"Got bid rate.\");\n    }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Issue",
  "modified": "2021-07-01 09:07:28.965753",
  "name": "Issue-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Issue', {\n    refresh(frm) {\n        frm.clear_custom_buttons();\n        var exclusion_list = [\n            \"resolution_details\",\n            \"opening_date\",\n            \"opening_time\",\n            \"resolution_date\"\n        ];\n        frm.fields.forEach( function(field) {\n            if (exclusion_list.includes(field.df.fieldname)) {\n                frm.set_df_property(field.df.fieldname, \"read_only\", 0);\n            }\n        });\n        if (frm.doc.status == \"Closed\") {\n            if (frappe.user_roles.includes(\"Support Manager\")) {\n                frm.add_custom_button(__(\"Reopen\"), function() {\n                    frm.set_value(\"status\", \"Open\");\n                    frm.save();\n                });\n            }\n            frm.fields.forEach( function(field) {\n                if (!exclusion_list.includes(field.df.fieldname)) {\n                    frm.set_df_property(field.df.fieldname, \"read_only\", 1);\n                }\n            });\n        } else {\n            frm.add_custom_button(__(\"Close\"), function() {\n                frm.set_value(\"status\", \"Closed\");\n                frm.save();\n            });\n        }\n        frm.add_custom_button(__(\"KB Articles\"), function() {\n            check_save(frm);\n            frappe.route_options = {\n                \"area\": \"Technical\",\n                \"type\": \"Product\",\n                \"product\": frm.doc.model\n            };\n            frappe.set_route(\"List\", \"KBA\");\n        });\n        frm.add_custom_button(__(\"Timesheets\"), function() {\n            check_save(frm);\n            frappe.set_route(\"List\", \"Timesheet\");\n        });\n        if (!frm.doc.warranty_job && !frm.doc.sla_job && !frm.doc.delivery_note) {\n                frm.add_custom_button(__(\"Quotation\"), function() {\n                    create_quote(frm);\n                }, \"Billing\");\n        }\n        if (frm.doc.status == \"Closed\" && (!frm.doc.delivery_note || frm.doc.delivery_note_status == \"Cancelled\") && (frm.doc.quotation  || frm.doc.warranty_job || frm.doc.sla_job)) {\n            frm.add_custom_button(__(\"Delivery Note\"), function() {\n                create_delivery(frm);\n            }, \"Billing\");\n        }\n        if (frm.doc.status != \"Closed\") {\n            frm.add_custom_button(__(\"Parts Request\"), function() {\n                check_save(frm);\n                var parts_requested = 0;\n                if (frm.doc.part_list) {\n                    const request = frappe.model.get_new_doc(\"Material Request\");\n                    request.naming_series = \"MAT-MR-.YYYY.-\";\n                    request.schedule_date = frappe.datetime.nowdate();\n                    request.transaction_date = frappe.datetime.nowdate();\n                    request.material_request_type = \"Material Transfer\";\n                    request.company = \"Eskill Trading (Pvt) Ltd\";\n                    request.requested_by = frappe.session.user;\n                    request.issue = frm.doc.name;\n                    request.docstatus = 1;\n                    request.status = \"Submitted\";\n                    frm.doc.part_list.forEach(function(row) {\n                        if (row.status == \"Not Requested\") {\n                            parts_requested++;\n                            var part = frappe.model.add_child(request, \"Material Request Item\", \"items\");\n                            part.item_code = row.part;\n                            part.qty = row.qty;\n                            part.description = row.description;\n                            part.schedule_date = request.schedule_date;\n                            part.uom = row.uom;\n                            part.stock_uom = row.uom;\n                            part.warehouse = row.warehouse;\n                            part.conversion_factor = 1;\n                        }\n                    });\n                    if (parts_requested) {\n                        frappe.db.insert(request).then(function(doc) {\n                            const new_request = doc.name;\n                            frm.doc.part_list.forEach(function(row) {\n                                if (row.status == \"Not Requested\") {\n                                    row.status = \"Requested\";\n                                    row.request = new_request;\n                                }\n                            });\n                            check_save(frm);\n                        });\n                    } else {\n                        frappe.msgprint(\"No parts to request.\");\n                    }\n                } else {\n                    frappe.msgprint(\"Populate parts list to request items.\");\n                }\n            });\n            if (frm.doc.model) {\n                serial_filter(frm, frm.doc.model, frm.fields_dict.serial_number);\n            }\n            frm.get_field(\"part_list\").grid.fields_map.warehouse.get_query = function() {\n                return {\n                    filters: {\n                        'disabled': 0,\n                        'warehouse_type': 'Technician'\n                    }\n                };\n            };\n            model_filter(frm);\n            if (frm.doc.total_hours != 0) {\n                frm.set_df_property(\"expected_hours\", \"read_only\", 1);\n            }\n            if (frm.doc.quotation || frm.doc.order || frm.doc.invoice) {\n                frm.set_df_property(\"customer\", \"read_only\", 1);\n            }\n            labour_filter(frm);\n            current_technician_filter(frm);\n            stock_item_filter(frm);\n            if (frm.doc.swap_out) {\n                device_read_only(frm);\n            }\n            single_or_multiple_devices(frm);\n            device_list_refresh(frm);\n        }\n        if (frm.doc.serial_number) {\n            serial_status(frm);\n        }\n        frm.get_field(\"part_list\").grid.grid_rows.forEach(function(row) {\n            if (row.doc.status == \"Requested\") {\n                var request = row.doc.request;\n                frappe.model.with_doc(\"Material Request\", request, function() {\n                    request = frappe.model.get_doc(\"Material Request\", request);\n                    var item = request.items[row.doc.row];\n                    if (item.ordered_qty == item.stock_qty) {\n                        row.doc.status = \"Released\";\n                    }\n                });\n            }\n        });\n        frm.refresh_fields();\n    },\n\n    before_save: function(frm) {\n        if (frm.doc.serial_number && !frm.doc.model) {\n            frm.doc.serial_number = undefined;\n        }\n        if (frm.doc.stock_item) {\n            frm.doc.stock_item = undefined;\n        }\n        if (frm.doc.multiple_devices) {\n            device_list_validation_before_save(frm);\n        }\n        time_worked(frm);\n    },\n    \n    multiple_devices: function(frm) {\n        single_or_multiple_devices(frm);\n        model_filter(frm);\n    },\n\n    serial_number: function(frm) {\n        serial_status(frm);\n    },\n\n    serial_no_report: function(frm) {\n        serial_report(frm, frm.doc.serial_number);\n    },\n\n    warranty_date_update: function(frm) {\n        warranty_date_update(frm, frm.doc.model, frm.doc.serial_number);\n    },\n\n    request_swap_out: function(frm) {\n        request_swap(frm, frm.doc.model, frm.doc.serial_number);\n    },\n\n    email_account: function(frm) {\n        if (frm.doc.email_account == 'Zabbix Internal Issues') {\n            frm.set_value(\"issue_type\", \"Internal Software Support\");\n            frm.set_value(\"priority\", \"High\");\n            check_save(frm);\n        }\n    },\n\n    search: function(frm) {\n        if (frm.doc.stock_item) {\n            stock_lookup(frm);\n        } else {\n            frappe.throw(\"You must select a stocked item before performing a stock lookup.\");\n        }\n    },\n\n    kba_creation: function(frm) {\n        check_save(frm);\n        frappe.db.insert({\n            doctype: 'KBA',\n            topic: frm.doc.subject,\n            area: 'Technical',\n            type: 'Product',\n            product: frm.doc.model,\n            details: frm.doc.resolution_details,\n            parent_kba: 'KBA-20-Other-00000036'\n        });\n        frappe.msgprint(\"KBA created.\");\n    },\n\n    model: function(frm) {\n        serial_filter(frm, frm.doc.model, frm.fields_dict.serial_number);\n    },\n\n    service_level_agreement: function(frm) {\n        if (frm.doc.service_level_agreement) {\n            frm.set_value('sla_job', 1);\n        } else {\n            frm.set_value('sla_job', 0);\n        }\n    },\n\n    swap_out: function(frm) {\n        if (frm.doc.swap_out) {\n            device_read_only(frm);\n        }\n    },\n});\n\nfrappe.ui.form.on('Part List', {\n    before_part_list_remove: function(frm, cdt, cdn) {\n        if (!frappe.user_roles.includes(\"System Administrator\") && locals[cdt][cdn].status != \"Not Requested\") {\n            frappe.throw(__(\"Unable to delete row {0}. Only a system administrator may remove an entry for a requested part.\", [locals[cdt][cdn].idx]));\n        }\n    },\n    \n    received_button: function(frm, cdt, cdn) {\n        const row = frappe.get_doc(cdt, cdn);\n        frm.get_field(\"part_list\").grid.grid_rows[row.idx - 1].doc.status = \"Received\";\n        frm.get_field(\"part_list\").grid.grid_rows[row.idx - 1].refresh_field(\"status\");\n        check_save(frm);\n    },\n});\n\nfrappe.ui.form.on('Issue Machines', {\n    before_device_list_remove: function(frm, cdt, cdn) {\n        if (!frappe.user_roles.includes(\"Support Manager\") && locals[cdt][cdn].model) {\n            frappe.throw(\"Please contact a support manager if you wish to remove a device from this issue.\");\n        }\n    },\n    \n    model: function(frm, cdt, cdn) {\n        if (locals[cdt][cdn].serial_number) {\n            locals[cdt][cdn].serial_number = undefined;\n        }\n        if (locals[cdt][cdn].model) {\n            serial_filter(frm, locals[cdt][cdn].model, frm.get_field(\"device_list\").grid.grid_rows_by_docname[cdn].docfields[1]);\n        }\n        frm.refresh_fields();\n    },\n\n    serial_no_report: function(frm, cdt, cdn) {\n        serial_report(frm, locals[cdt][cdn].serial_number);\n    },\n\n    warranty_date_update: function(frm, cdt, cdn) {\n        warranty_date_update(frm, locals[cdt][cdn].model, locals[cdt][cdn].serial_number);\n    },\n    \n    // The following code has been commented out as it is not currently functioning, and is not immediately necessary.\n    //\n    //request_swap_out: function(frm, cdt, cdn) {\n    //    request_swap(frm, locals[cdt][cdn].model, locals[cdt][cdn].serial_number, 1, locals[cdt][cdn]);\n    //},\n\n});\n\nfunction create_quote(frm) {\n    check_save(frm);\n    if ((frm.doc.expected_hours > 0) || (frm.doc.billable_time > 0)) {\n        var quote = frappe.model.get_new_doc(\"Quotation\");\n        quote.naming_series = \"SQ.########\";\n        quote.quotation_to = \"Customer\";\n        quote.party_name = frm.doc.customer;\n        quote.order_type = \"Support\";\n        quote.company = frappe.user_defaults.company;\n        quote.issue = frm.doc.name;\n        quote.transaction_date = frappe.datetime.nowdate();\n        quote.valid_till = frappe.datetime.add_days(frappe.datetime.nowdate(), 1);\n        quote.selling_price_list = frappe.user_defaults.selling_price_list;\n        var time = frappe.model.add_child(quote, \"Quotation Item\", \"items\");\n        var time_value = 1;\n        if (frm.doc.billable_time === 0) {\n            time_value = Math.ceil(frm.doc.expected_hours);\n            time.qty = time_value;\n            time.stock_qty = time_value;\n            time.conversion_factor = 1;\n            frappe.model.with_doc(\"Item\", frm.doc.labour_code, function () {\n                const labour = frappe.model.get_doc(\"Item\", frm.doc.labour_code);\n                time.item_code = labour.name;\n                time.item_name = labour.item_name;\n                time.description = labour.description;\n                time.uom = labour.stock_uom;\n                time.stock_uom = labour.stock_uom;\n            });\n        } else {\n            time_value = Math.ceil(frm.doc.billable_time);\n            time.qty = time_value;\n            time.stock_qty = time_value;\n            time.conversion_factor = 1;\n            frappe.model.with_doc(\"Item\", frm.doc.labour_code, function () {\n                const labour = frappe.model.get_doc(\"Item\", frm.doc.labour_code);\n                time.item_code = labour.name;\n                time.item_name = labour.item_name;\n                time.description = labour.description;\n                time.uom = labour.stock_uom;\n                time.stock_uom = labour.stock_uom;\n            });\n        }\n        time_value = undefined;\n        if (frm.doc.part_list.length) {\n            frm.doc.part_list.forEach(function (row) {\n                var part = frappe.model.add_child(quote, \"Quotation Item\", \"items\");\n                part.item_code = row.part;\n                part.item_name = row.item_name;\n                part.qty = row.qty;\n                part.description = row.description;\n                part.uom = row.uom;\n                part.stock_uom = row.uom;\n                part.conversion_factor = 1;\n                part.warehouse = row.warehouse;\n            });\n        }\n        frappe.set_route(\"Form\", \"Quotation\", quote.name);\n    } else {\n        frappe.throw(\"Must have expected job completion time or billable time in order to quote.\");\n    }\n}\n\nfunction device_list_validation_before_save(frm) {\n    frm.doc.device_list.forEach(function(row) {\n        if (locals[row.doctype][row.name].serial_number) {\n            if (!locals[row.doctype][row.name].model) {\n                locals[row.doctype][row.name].serial_number = undefined;\n            } else {\n                frappe.db.get_value(\"Serial No\", locals[row.doctype][row.name].serial_number, \"item_code\").then( function(response) {\n                    if (response.message.item_code != locals[row.doctype][row.name].model) {\n                        locals[row.doctype][row.name].serial_number = undefined;\n                    }\n                })\n            }\n        }\n    });\n}\n\nfunction model_filter(frm) {\n    if (frm.doc.multiple_devices) {\n        frm.get_field(\"device_list\").grid.fields_map.model.get_query = function() {\n            return {\n                filters: [\n                    [\"Item\", \"has_serial_no\", \"=\", 1]\n                ]\n            };\n        };\n    } else {\n        frm.fields_dict.model.get_query = function() {\n            return {\n                filters: [\n                    [\"Item\", \"has_serial_no\", \"=\", 1]\n                ]\n            };\n        };\n    }\n}\n\nfunction device_list_refresh(frm) {\n    frm.doc.device_list.forEach(function(row) {\n        if (locals[row.doctype][row.name].model) {\n            serial_filter(frm, locals[row.doctype][row.name].model, frm.get_field(\"device_list\").grid.grid_rows_by_docname[row.name].docfields[1]);\n        }\n    });\n    frm.refresh_fields();\n}\n\nfunction request_swap(frm, model, s_number) {\n    check_save(frm).then(function() {\n        var swap_out = frappe.model.get_new_doc(\"Warranty Swap Out\");\n        swap_out.issue = frm.doc.name;\n        swap_out.model_in = model;\n        swap_out.serial_no_in = s_number;\n        frappe.db.insert(swap_out).then(function(doc) {\n            frm.doc.swap_out = doc.name;\n            check_save(frm);\n            frappe.set_route(\"Form\", \"Warranty Swap Out\", doc.name);\n        });\n    });\n}\n\nfunction warranty_date_update(frm, model, s_number) {\n    check_save(frm);\n    if (s_number) {\n        var warranty_get, item_warranty, name_get, customer_name;\n        frappe.run_serially([\n            () => warranty_get = frappe.db.get_value(\"Item\", model, \"warranty_period\"),\n            () => item_warranty = warranty_get.responseJSON.message.warranty_period,\n            () => name_get = frappe.db.get_value(\"Customer\", frm.doc.customer, \"customer_name\"),\n            () => customer_name = name_get.responseJSON.message.customer_name,\n            () => frappe.prompt([\n                {\n                    label: 'Date of Purchase',\n                    fieldname: 'purchase_date',\n                    fieldtype: 'Date',\n                    description: 'From dealer',\n                    reqd: true\n                },\n                {\n                    label: 'Warranty Period(Days)',\n                    fieldname: 'warranty_period',\n                    fieldtype: 'Int',\n                    reqd: item_warranty ? false : true\n                },\n            ], (values) => {\n                if (values.warranty_period) {\n                    frappe.call({\n                        \"method\": \"frappe.client.set_value\",\n                        \"args\": {\n                            \"doctype\": \"Serial No\",\n                            \"name\": s_number,\n                            \"fieldname\": {\n                                \"customer\": frm.doc.customer,\n                                \"customer_name\": customer_name,\n                                \"warranty_expiry_date\": frappe.datetime.add_days(values.purchase_date, values.warranty_period),\n                            },\n                        }\n                    });\n                } else if (item_warranty) {\n                    frappe.call({\n                        \"method\": \"frappe.client.set_value\",\n                        \"args\": {\n                            \"doctype\": \"Serial No\",\n                            \"name\": s_number,\n                            \"fieldname\": {\n                                \"customer\": frm.doc.customer,\n                                \"customer_name\": customer_name,\n                                \"warranty_expiry_date\": frappe.datetime.add_days(values.purchase_date, item_warranty),\n                            },\n                        }\n                    });\n                } else {\n                    frappe.throw(\"No warranty period has been defined for the item.\");\n                }\n            }),\n        ]);\n    } else {\n        frappe.msgprint(\"No serial number.\");\n    }\n}\n\nfunction current_technician_filter(frm) {\n    frm.fields_dict.current_technician.get_query = function() {\n        return {\n            filters: [\n                [\"Employee\", \"status\", \"=\", \"Active\"]\n            ],\n        };\n    };\n}\n\nfunction stock_item_filter(frm) {\n    frm.fields_dict.stock_item.get_query = function() {\n        return {\n            filters: [\n                [\"Item\", \"is_stock_item\", \"=\", true],\n                [\"Item\", \"disabled\", \"=\", false],\n            ],\n        };\n    };\n}\n\nfunction stock_lookup(frm) {\n    const table_fields = [\n        {\n            fieldname: \"location\", fieldtype: \"Text\",\n            in_list_view: 1, label: \"Location\",\n            options: \"Warehouse\", read_only: 1\n        },\n        {\n            fieldname: \"quantity\", fieldtype: \"Float\",\n            in_list_view: 1, label: \"Quantity\",\n            read_only: 1\n        }\n    ];\n    frappe.call({\n        method: \"eskill_custom.api.stock_lookup\",\n        args: {\n            doctype: frm.doctype,\n            user: frappe.session.user,\n            item: frm.doc.stock_item\n        },\n        callback: function(data) {\n            if (data.message) {\n                const results = data.message;\n                const dialog = new frappe.ui.Dialog({\n                    title: __(\"Stock Availability\"),\n                    static: true,\n                    fields: [\n                        {\n                            fieldname: \"item\",\n                            label: \"Item\",\n                            fieldtype: \"Link\",\n                            options: \"Item\",\n                            default: frm.doc.stock_item,\n                            read_only: 1\n                        },\n                        {\n                            fieldname: \"sb1\",\n                            fieldtype: \"Section Break\"\n                        },\n                        {\n                            fieldname: \"currency\",\n                            label: \"Currency\",\n                            fieldtype: \"Link\",\n                            options: \"Currency\",\n                            change: function() {\n                                frappe.call({\n                                    method: \"eskill_custom.api.item_price_lookup\",\n                                    args: {\n                                        doctype: frm.doctype,\n                                        currency: dialog.fields_dict.currency.value,\n                                        price_list: \"Standard Selling\",\n                                        item: frm.doc.stock_item\n                                    },\n                                    callback: function(data) {\n                                        if (data.message) {\n                                            if (data.message == \"Unavailable\") {\n                                                dialog.set_value(\"price\", data.message);\n                                            } else {\n                                                dialog.set_value(\"price\", data.message[0][0]);\n                                            }\n                                        } else {\n                                            dialog.set_value(\"price\", \"Unavailable\");\n                                        }\n                                    }\n                                });\n                            }\n                        },\n                        {\n                            fieldname: \"cb1\",\n                            fieldtype: \"Column Break\"\n                        },\n                        {\n                            fieldname: \"price\",\n                            label: \"Price\",\n                            fieldtype: \"Data\",\n                            read_only: 1\n                        },\n                        {\n                            fieldname: \"sb2\",\n                            fieldtype: \"Section Break\"\n                        },\n                        {\n                            fieldname: \"stock_levels\",\n                            fieldtype: \"Table\",\n                            label: \"Stock Levels\",\n                            cannot_add_rows: true,\n                            in_place_edit: false,\n                            read_only: 1,\n                            data: results,\n                            fields: table_fields\n                        }\n                    ],\n                    primary_action: function() {\n                        dialog.hide();\n                    },\n                    primary_action_label: \"Close\"\n                });\n                dialog.fields_dict.currency.get_query = function() {\n                    return {\n                        filters: [\n                            [\"Currency\", \"enabled\", \"=\", true]\n                        ]\n                    }\n                }\n                dialog.show();\n            } else {\n                frappe.message(\"There is no available stock.\");\n            }\n        }\n    });\n}\n\nfunction create_delivery(frm) {\n    check_save(frm);\n    var delivery = frappe.model.get_new_doc(\"Delivery Note\");\n    delivery.naming_series = \"DN.########\";\n    delivery.posting_date = frappe.datetime.nowdate();\n    delivery.company = frappe.user_defaults.company;\n    delivery.customer = frm.doc.customer;\n    delivery.issue = frm.doc.name;\n    if (!frm.doc.sla_job && !frm.doc.warranty_job) {\n        frappe.model.with_doc(\"Quotation\", frm.doc.quotation, function() {\n            const quote = frappe.model.get_doc(\"Quotation\", frm.doc.quotation);\n            delivery.selling_price_list = quote.selling_price_list;\n            delivery.currency = quote.currency;\n            delivery.conversion_rate = quote.conversion_rate;\n            quote.items.forEach(function(quote_item) {\n                var note_item = frappe.model.add_child(delivery, \"Delivery Note Item\", \"items\");\n                note_item.item_code = quote_item.item_code;\n                note_item.item_name = quote_item.item_name;\n                note_item.description = quote_item.description;\n                note_item.qty = quote_item.qty;\n                note_item.stock_qty = quote_item.qty;\n                note_item.schedule_date = delivery.schedule_date;\n                note_item.uom = quote_item.uom;\n                note_item.stock_uom = quote_item.uom;\n                note_item.conversion_factor = 1;\n                note_item.rate = quote_item.rate;\n                note_item.warehouse = quote_item.warehouse;\n            });\n        });\n    } else {\n        if (frm.doc.part_list.length) {\n            delivery.selling_price_list = frappe.user_defaults.selling_price_list;\n            delivery.currency = frappe.user_defaults.currency;\n            delivery.sla_issue = frm.doc.sla_job ? 1 : 0;\n            delivery.warranty_issue = frm.doc.warranty_job ? 1 : 0;\n            // Labour will be put in here when valuation for labour is implemented\n            frm.doc.part_list.forEach(function (row) {\n                if (row.status = \"Received\") {\n                    frappe.call({\n                        method: \"eskill_custom.api.non_billable_item\",\n                        args: {\n                            item_code: row.part,\n                            sla_job: frm.doc.sla_job\n                        },\n                        callback: function(data) {\n                            if (data.message) {\n                                if (data.message.valuation && data.message.expense_account) {\n                                    var note_item = frappe.model.add_child(delivery, \"Delivery Note Item\", \"items\");\n                                    note_item.item_code = row.part;\n                                    note_item.item_name = row.part_name;\n                                    note_item.description = row.description;\n                                    note_item.schedule_date = delivery.schedule_date;\n                                    note_item.qty = row.qty;\n                                    note_item.stock_qty = row.qty;\n                                    note_item.uom = row.uom;\n                                    note_item.stock_uom = row.uom;\n                                    note_item.conversion_factor = 1;\n                                    note_item.warehouse = row.warehouse;\n                                    note_item.expense_account = data.message.expense_account;\n                                    note_item.rate = data.message.valuation;\n                                } else {\n                                    console.log(data);\n                                    frappe.throw(\"Failed to get valuation rate and expense account for \".concat(row.part));\n                                }\n                            } else {\n                                console.log(data);\n                                frappe.throw(\"Failed to get valuation rate and expense account for \".concat(row.part));\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n    frappe.set_route(\"Form\", \"Delivery Note\", delivery.name);\n}\n\nfunction single_or_multiple_devices(frm) {\n    if (frm.doc.multiple_devices) {\n        frm.set_df_property(\"device_details\", \"hidden\", 1);\n        frm.set_df_property(\"devices\", \"hidden\", 0);\n        frm.doc.model = \"\";\n        frm.doc.serial_number = \"\";\n        frm.refresh_fields();\n    } else {\n        frm.set_df_property(\"device_details\", \"hidden\", 0);\n        frm.set_df_property(\"devices\", \"hidden\", 1);\n        frm.clear_table(\"device_list\");\n        frm.refresh_fields();\n    }\n}\n\nfunction check_save(frm) {\n    if (frm.doc.__unsaved) {\n        frm.save();\n    }\n}\n\nfunction labour_filter(frm) {\n    frm.fields_dict.labour_code.get_query = function() {\n        return {\n            filters: [\n                [\"Item\", \"item_group\", \"like\", \"%Services%\"],\n                [\"Item\", \"disabled\", \"=\", false],\n            ],\n        }\n    }\n}\n\nfunction serial_filter(frm, model, s_number) {\n    s_number.get_query = function() {\n        return {\n            filters: {\n                'item_code': model\n            }\n        };\n    };\n    frm.refresh_fields();\n}\n\nfunction serial_status(frm) {\n    var status;\n    frappe.run_serially([\n        () => frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                \"doctype\": \"Serial No\",\n                \"filters\": {\n                    'name': frm.doc.serial_number // where Clause \n                },\n                \"fieldname\": ['maintenance_status'], // fieldname to be fetched\n                \"limit\": 1\n            },\n            callback: function(data) {\n                status = data.message.maintenance_status;\n            }\n        }),\n        () => frm.set_df_property(\"serial_number\", \"description\", status ? status : \"Unknown\")\n    ]);\n}\n\nfunction device_read_only(frm) {\n    frm.set_df_property(\"model\", \"read_only\", 1);\n    frm.set_df_property(\"serial_number\", \"read_only\", 1);\n    frm.set_df_property(\"warranty_job\", \"read_only\", 1);\n    frm.set_df_property(\"multiple_devices\", \"read_only\", 1);\n    frm.set_df_property(\"device_list\", \"read_only\", 1);\n}\n\nfunction time_worked(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.issue_total_hours\",\n        args: {\n            doctype: frm.doctype,\n            filters: frm.doc.name,\n        },\n        callback: function(data) {\n            if (data.message) {\n                if (data.message[0].total != frm.doc.total_time) {\n                    frm.doc.total_time = data.message[0].total;\n                }\n                if (data.message[0].billable != frm.doc.billable_time) {\n                    frm.doc.billable_time = data.message[0].billable;\n                }\n            } else {\n                frm.doc.total_time = 0;\n                frm.doc.billable_time = 0;\n            }\n        }\n    });\n}\n\nfunction serial_report(frm, s_number) {\n    check_save(frm);\n    if (s_number) {\n        window.open(\"api/method/frappe.utils.print_format.download_pdf?doctype=Serial No&name=\" + s_number + \"&format=Eskill Serial Number History\");\n    } else {\n        frappe.msgprint(\"No serial number.\");\n    }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Customer",
  "modified": "2021-05-11 14:53:46.817260",
  "name": "Customer-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Customer', {\n\tdefault_currency: function(frm) {\n\t\tfrappe.call({\n\t\t    method: \"eskill_custom.api.customer_account_selector\",\n\t\t    args: {\n\t            currency: frm.doc.default_currency\n\t\t    },\n\t\t    callback: function(response) {\n\t\t        frappe.model.clear_table(frm.doc, \"accounts\");\n\t\t        if (response.message) {\n    \t\t        var debtors_account = frappe.model.add_child(frm.doc, \"Party Account\", \"accounts\");\n    \t\t        debtors_account.company = frappe.defaults.get_user_default(\"Company\");\n    \t\t        debtors_account.account = response.message;\n\t\t        }\n\t\t        frm.refresh_fields();\n\t\t    }\n\t\t});\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Item",
  "modified": "2020-09-15 10:27:22.849833",
  "name": "Item-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t    frm.add_custom_button(__(\"KB Articles\"), function() {\n\t        frm.save();\n            frappe.route_options = {\n                \"type\": \"Product\",\n                \"product\": cur_frm.doc.item_code\n            };\n            frappe.set_route(\"List\", \"KBA\", \"List\");\n\t    });\n\t    frm.add_custom_button(__(\"New KBA\"), function() {\n\t        frm.save();\n            frappe.route_options = {\n                \"type\": \"Product\",\n                \"product\": cur_frm.doc.item_code\n            };\n            frappe.set_route(\"Form\", \"KBA\", \"New KBA\");\n\t    });\n    }\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Order",
  "modified": "2021-06-21 13:04:21.127845",
  "name": "Sales Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh(frm) {\n        stock_item_filter(frm);  \n        tax_template_filter(frm);\n    },\n    \n    before_save(frm) {\n        set_tax_template(frm);\n\t\tassign_sales_person(frm);\n\t\tif (frm.doc.stock_item) {\n\t\t\tfrm.doc.stock_item = undefined;\n\t\t}\n    },\n\n    before_submit(frm) {\n        set_tax_template(frm);\n\t\tassign_sales_person(frm);\n\t},\n\n    customer: function(frm) {\n        set_tax_template(frm);\n    },\n\n    currency: function(frm) {\n        set_tax_template(frm);\n    },\n    \n\tsearch: function(frm) {\n\t\tif (frm.doc.stock_item) {\n\t\t\tstock_lookup(frm);\n\t\t} else {\n\t\t\tfrappe.throw(\"You must select a stocked item before performing a stock lookup.\");\n\t\t}\n    }\n});\n\nfunction stock_item_filter(frm) {\n\tfrm.fields_dict.stock_item.get_query = function () {\n\t\treturn {\n\t\t\tfilters: [\n\t\t\t\t[\"Item\", \"is_stock_item\", \"=\", true],\n\t\t\t\t[\"Item\", \"disabled\", \"=\", false],\n\t\t\t],\n\t\t};\n\t};\n}\n\nfunction tax_template_filter(frm) {\n    frm.fields_dict.taxes_and_charges.get_query = function() {\n        return {\n            filters: [\n                [\"Sales Taxes and Charges Template\", \"currency\", \"=\", frm.doc.currency]\n            ]\n        };\n    };\n}\n\nfunction stock_lookup(frm) {\n\tconst table_fields = [\n\t\t{\n\t\t\tfieldname: \"location\", fieldtype: \"Text\",\n\t\t\tin_list_view: 1, label: \"Location\",\n\t\t\toptions: \"Warehouse\", read_only: 1\n\t\t},\n\t\t{\n\t\t\tfieldname: \"quantity\", fieldtype: \"Float\",\n\t\t\tin_list_view: 1, label: \"Quantity\",\n\t\t\tread_only: 1\n\t\t}\n\t];\n\tfrappe.call({\n\t\tmethod: \"eskill_custom.api.stock_lookup\",\n\t\targs: {\n\t\t\tdoctype: frm.doctype,\n\t\t\tuser: frappe.session.user,\n\t\t\titem: frm.doc.stock_item\n\t\t},\n\t\tcallback: function (data) {\n\t\t\tif (data.message) {\n\t\t\t\tconst results = data.message;\n\t\t\t\tconst dialog = new frappe.ui.Dialog({\n\t\t\t\t\ttitle: __(\"Stock Availability\"),\n\t\t\t\t\tstatic: true,\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"item\",\n\t\t\t\t\t\t\tlabel: \"Item\",\n\t\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\t\toptions: \"Item\",\n\t\t\t\t\t\t\tdefault: frm.doc.stock_item,\n\t\t\t\t\t\t\tread_only: 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"sb1\",\n\t\t\t\t\t\t\tfieldtype: \"Section Break\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"currency\",\n\t\t\t\t\t\t\tlabel: \"Currency\",\n\t\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\t\toptions: \"Currency\",\n\t\t\t\t\t\t\tchange: function() {\n\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\tmethod: \"eskill_custom.api.item_price_lookup\",\n\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\tdoctype: frm.doctype,\n\t\t\t\t\t\t\t\t\t\tcurrency: dialog.fields_dict.currency.value,\n\t\t\t\t\t\t\t\t\t\tprice_list: \"Standard Selling\",\n\t\t\t\t\t\t\t\t\t\titem: frm.doc.stock_item\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcallback: function(data) {\n\t\t\t\t\t\t\t\t\t\tif (data.message) {\n\t\t\t\t\t\t\t\t\t\t\tif (data.message == \"Unavailable\") {\n\t\t\t\t\t\t\t\t\t\t\t\tdialog.set_value(\"price\", data.message);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tdialog.set_value(\"price\", data.message[0][0]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tdialog.set_value(\"price\", \"Unavailable\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"cb1\",\n\t\t\t\t\t\t\tfieldtype: \"Column Break\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"price\",\n\t\t\t\t\t\t\tlabel: \"Price\",\n\t\t\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\t\t\tread_only: 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"sb2\",\n\t\t\t\t\t\t\tfieldtype: \"Section Break\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"stock_levels\",\n\t\t\t\t\t\t\tfieldtype: \"Table\",\n\t\t\t\t\t\t\tlabel: \"Stock Levels\",\n\t\t\t\t\t\t\tcannot_add_rows: true,\n\t\t\t\t\t\t\tin_place_edit: false,\n\t\t\t\t\t\t\tread_only: 1,\n\t\t\t\t\t\t\tdata: results,\n\t\t\t\t\t\t\tfields: table_fields\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tprimary_action: function() {\n\t\t\t\t\t\tdialog.hide();\n\t\t\t\t\t},\n\t\t\t\t\tprimary_action_label: \"Close\"\n\t\t\t\t});\n\t\t\t\tdialog.fields_dict.currency.get_query = function() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t[\"Currency\", \"enabled\", \"=\", true]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdialog.show();\n\t\t\t} else {\n\t\t\t\tfrappe.message(\"There is no available stock.\");\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction set_tax_template(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.sales_invoice_tax\",\n        args: {\n            \"doctype\": frm.doctype,\n            \"currency\": frm.doc.currency,\n            \"customer\": frm.doc.customer\n        },\n        callback: function (data) {\n            var template = data.message[0][0];\n            if (template) {\n                frappe.run_serially([\n\t\t\t\t\t() => frm.set_value(\"taxes_and_charges\", template),\n\t\t\t\t\t() => frm.trigger(\"taxes_and_charges\")\n\t\t\t\t]);\n            } else {\n                frappe.msgprint(\"No Tax Template detected.\");\n            }\n        }\n    });\n}\n\nfunction check_save(frm) {\n    if (frm.doc.__unsaved) {\n        frm.save();\n    }\n}\n\nfunction assign_sales_person(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.invoice_sales_person\",\n        args: {\n            user: frappe.session.user,\n            service_invoice: false,\n            issue: \"\"\n        },\n        callback: function(response) {\n            frm.clear_table('sales_team');\n            response.message.forEach( function(person) {\n                frm.add_child('sales_team', {\n                    'sales_person': person.sales_person,\n                    'allocated_percentage': person.contribution\n                });\n            });\n            frm.refresh_field('sales_team');\n        }\n    });\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Invoice",
  "modified": "2021-06-23 16:08:28.841985",
  "name": "Sales Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh(frm) {\n        stock_item_filter(frm);\n        tax_template_filter(frm);\n        setTimeout(() => {\n            frm.remove_custom_button(\"Work Order\", 'Create');\n            frm.remove_custom_button(\"Project\", 'Create'); \n            frm.remove_custom_button(\"Subscription\", 'Create');\n            frm.remove_custom_button(\"Return / Credit Note\", 'Create');\n        }, 500);\n        naming_series_set(frm);\n    },\n    \n    before_save(frm) {\n        set_tax_template(frm);\n        assign_sales_person(frm);\n        if (frm.doc.stock_item) {\n            frm.doc.stock_item = undefined;\n        }\n    },\n\n    before_submit(frm) {\n        assign_sales_person(frm);\n        if (frm.doc.currency == \"USD\") {\n            get_bid_rate(frm);\n        }\n    },\n    \n    after_save(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    on_submit(frm) {\n        link_credit_to_invoice(frm);\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    on_update(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    after_cancel(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n\n    customer: function(frm) {\n        set_tax_template(frm);\n    },\n\n    currency: function(frm) {\n        if (frm.doc.customer) {\n            set_tax_template(frm);\n        }\n    },\n\n    is_return: function(frm) {\n        naming_series_set(frm);\n    },\n\n    search: function(frm) {\n        if (frm.doc.stock_item) {\n            stock_lookup(frm);\n        } else {\n            frappe.throw(\"You must select a stocked item before performing a stock lookup.\");\n        }\n    }\n});\n\nfunction assign_sales_person(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.invoice_sales_person\",\n        args: {\n            user: frappe.session.user,\n            service_invoice: (frm.doc.issue) ? true : false,\n            issue: (frm.doc.issue) ? frm.doc.issue : \"\"\n        },\n        callback: function(response) {\n            frm.clear_table('sales_team');\n            response.message.forEach( function(person) {\n                frm.add_child('sales_team', {\n                    'sales_person': person.sales_person,\n                    'allocated_percentage': person.contribution\n                });\n            });\n            frm.refresh_field('sales_team');\n        }\n    });\n}\n\nfunction link_credit_to_invoice(frm) {\n    if (frm.doc.is_return) {\n        frappe.call({\n            method: \"eskill_custom.api.set_invoice_as_credited\",\n            args: {\n                credit: frm.doc.name\n            },\n            callback: function (message) {\n                if (message) {\n                    console.log(message);\n                }\n            }\n        });\n    }\n}\n\nfunction issue_billing_update(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.update_issue_billing\",\n        args: {\n            docfield: \"invoice\",\n            docname: frm.doc.name,\n            docfield_status: frm.doc.status,\n            issue: frm.doc.issue\n        },\n        callback: function(response) {\n            if (response.message != 1) {\n                frappe.throw(__(\"Error encountered when updating issue.\"));\n            }\n        }\n    });\n}\n\nfunction stock_item_filter(frm) {\n    frm.fields_dict.stock_item.get_query = function () {\n        return {\n            filters: [\n                [\"Item\", \"is_stock_item\", \"=\", true],\n                [\"Item\", \"disabled\", \"=\", false],\n            ],\n        };\n    };\n}\n\nfunction tax_template_filter(frm) {\n    frm.fields_dict.taxes_and_charges.get_query = function() {\n        return {\n            filters: [\n                [\"Sales Taxes and Charges Template\", \"currency\", \"=\", frm.doc.currency]\n            ]\n        };\n    };\n}\n\nfunction stock_lookup(frm) {\n    const table_fields = [\n        {\n            fieldname: \"location\", fieldtype: \"Text\",\n            in_list_view: 1, label: \"Location\",\n            options: \"Warehouse\", read_only: 1\n        },\n        {\n            fieldname: \"quantity\", fieldtype: \"Float\",\n            in_list_view: 1, label: \"Quantity\",\n            read_only: 1\n        }\n    ];\n    frappe.call({\n        method: \"eskill_custom.api.stock_lookup\",\n        args: {\n            doctype: frm.doctype,\n            user: frappe.session.user,\n            item: frm.doc.stock_item\n        },\n        callback: function (data) {\n            if (data.message) {\n                const results = data.message;\n                const dialog = new frappe.ui.Dialog({\n                    title: __(\"Stock Availability\"),\n                    static: true,\n                    fields: [\n                        {\n                            fieldname: \"item\",\n                            label: \"Item\",\n                            fieldtype: \"Link\",\n                            options: \"Item\",\n                            default: frm.doc.stock_item,\n                            read_only: 1\n                        },\n                        {\n                            fieldname: \"sb1\",\n                            fieldtype: \"Section Break\"\n                        },\n                        {\n                            fieldname: \"currency\",\n                            label: \"Currency\",\n                            fieldtype: \"Link\",\n                            options: \"Currency\",\n                            change: function() {\n                                frappe.call({\n                                    method: \"eskill_custom.api.item_price_lookup\",\n                                    args: {\n                                        doctype: frm.doctype,\n                                        currency: dialog.fields_dict.currency.value,\n                                        price_list: \"Standard Selling\",\n                                        item: frm.doc.stock_item\n                                    },\n                                    callback: function(data) {\n                                        if (data.message) {\n                                            if (data.message == \"Unavailable\") {\n                                                dialog.set_value(\"price\", data.message);\n                                            } else {\n                                                dialog.set_value(\"price\", data.message[0][0]);\n                                            }\n                                        } else {\n                                            dialog.set_value(\"price\", \"Unavailable\");\n                                        }\n                                    }\n                                });\n                            }\n                        },\n                        {\n                            fieldname: \"cb1\",\n                            fieldtype: \"Column Break\"\n                        },\n                        {\n                            fieldname: \"price\",\n                            label: \"Price\",\n                            fieldtype: \"Data\",\n                            read_only: 1\n                        },\n                        {\n                            fieldname: \"sb2\",\n                            fieldtype: \"Section Break\"\n                        },\n                        {\n                            fieldname: \"stock_levels\",\n                            fieldtype: \"Table\",\n                            label: \"Stock Levels\",\n                            cannot_add_rows: true,\n                            in_place_edit: false,\n                            read_only: 1,\n                            data: results,\n                            fields: table_fields\n                        }\n                    ],\n                    primary_action: function() {\n                        dialog.hide();\n                    },\n                    primary_action_label: \"Close\"\n                });\n                dialog.fields_dict.currency.get_query = function() {\n                    return {\n                        filters: [\n                            [\"Currency\", \"enabled\", \"=\", true]\n                        ]\n                    };\n                };\n                dialog.show();\n            } else {\n                frappe.message(\"There is no available stock.\");\n            }\n        }\n    });\n}\n\nfunction set_tax_template(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.sales_invoice_tax\",\n        args: {\n            \"doctype\": frm.doctype,\n            \"currency\": frm.doc.currency,\n            \"customer\": frm.doc.customer\n        },\n        callback: function(data) {\n            var template = data.message[0][0];\n            if (template) {\n                frappe.run_serially([\n\t\t\t\t\t() => frm.set_value(\"taxes_and_charges\", template),\n\t\t\t\t\t() => frm.trigger(\"taxes_and_charges\")\n\t\t\t\t]);\n            } else {\n                frappe.msgprint(\"No Tax Template detected.\");\n            }\n        }\n    });\n}\n\nfunction check_save(frm) {\n    if (frm.doc.__unsaved) {\n        frm.save();\n    }\n}\n\nfunction get_bid_rate(frm) {\n    if (frm.doc.currency == \"USD\") {\n        frappe.call({\n            method: \"eskill_custom.api.auction_rate_lookup\",\n            args: {\n                posting_date: frm.doc.posting_date\n            },\n            callback: function(data) {\n                frm.set_value(\"auction_bid_rate\", data.message);\n            }\n        });\n        console.log(\"Got bid rate.\");\n    }\n}\n\nfunction naming_series_set(frm) {\n    if (frm.doc.is_return) {\n        frm.set_value(\"naming_series\", \"CN.########\");\n    } else {\n        frm.set_value(\"naming_series\", \"SI.########\");\n    }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Task",
  "modified": "2020-11-10 12:13:28.644749",
  "name": "Task-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Task', {\n\trefresh(frm) {\n\t    if (frm.doc.status == 'Completed') {\n            frm.add_custom_button(\"Reopen\", function() {\n                frm.set_value(\"status\", \"Open\");\n                frm.set_value(\"progress\", 95);\n                frm.save();\n            });\n\t    } else if (frm.doc.status == 'Cancelled'){\n            frm.add_custom_button(\"Reopen\", function() {\n                frm.set_value(\"status\", \"Open\");\n                frm.save();\n            });\n\t    } else if (frm.doc.status == \"Open\") {\n            frm.add_custom_button(\"Working\", function() {\n                frm.set_value(\"status\", \"Working\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Pending Review\", function() {\n                frm.set_value(\"status\", \"Pending Review\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Cancel\", function() {\n                frm.set_value(\"status\", \"Cancelled\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Complete\", function() {\n                frm.set_value(\"status\", \"Completed\");\n                frm.save();\n            }, \"Set Status\");\n\t    } else if (frm.doc.status == \"Working\") {\n            frm.add_custom_button(\"Open\", function() {\n                frm.set_value(\"status\", \"Open\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Pending Review\", function() {\n                frm.set_value(\"status\", \"Pending Review\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Cancel\", function() {\n                frm.set_value(\"status\", \"Cancelled\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Complete\", function() {\n                frm.set_value(\"status\", \"Completed\");\n                frm.save();\n            }, \"Set Status\");\n\t    } else if (frm.doc.status == \"Pending Review\") {\n            frm.add_custom_button(\"Open\", function() {\n                frm.set_value(\"status\", \"Open\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Working\", function() {\n                frm.set_value(\"status\", \"Working\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Cancel\", function() {\n                frm.set_value(\"status\", \"Cancelled\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Complete\", function() {\n                frm.set_value(\"status\", \"Completed\");\n                frm.save();\n            }, \"Set Status\");\n\t    } else if (frm.doc.status == \"Overdue\") {\n            frm.add_custom_button(\"Cancel\", function() {\n                frm.set_value(\"status\", \"Cancelled\");\n                frm.save();\n            }, \"Set Status\");\n            frm.add_custom_button(\"Complete\", function() {\n                frm.set_value(\"status\", \"Completed\");\n                frm.save();\n            }, \"Set Status\");\n\t    }\n\t},\n\t\n\tstatus: function(frm) {\n\t    if (frm.doc.status != \"Completed\") {\n\t        frm.set_value(\"completed_by\", \"\");\n\t    } else {\n\t        frm.set_value(\"completed_by\", frappe.session.user);\n\t    }\n\t    if (frm.doc.status == \"Working\" && frm.doc.progress === 0) {\n\t        frm.set_value(\"progress\", 5);\n\t    }\n\t}\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Timesheet",
  "modified": "2021-04-06 16:18:36.929492",
  "name": "Timesheet-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Timesheet', {\n\trefresh(frm) {\n\t\tfrm.add_custom_button(__(\"Issues\"), function() {\n\t\t    frm.save();\n            frappe.route_options = {\n                \"name\": '',\n                \"subject\": '',\n                \"customer\": '',\n                \"serial_number\": '',\n                \"project\": '',\n                \"status\": '',\n                \"priority\": '',\n                \"technician_name\": ''\n            };\n            frappe.set_route(\"List\", \"Issue\");\n\t    });\n\t\tfrm.add_custom_button(__(\"Tasks\"), function() {\n\t\t    frm.save();\n            frappe.route_options = {\n                \"name\": '',\n                \"subject\": '',\n                \"project\": '',\n                \"status\": '',\n                \"priority\": ''\n            };\n            frappe.set_route(\"List\", \"Task\");\n\t    });\n\t    activity_doctype_filter(frm);\n\t}\n});\n\nfunction activity_doctype_filter(frm) {\n\tfrm.get_field(\"time_logs\").grid.fields_map.activity_doctype.get_query = function () {\n\t\treturn {\n\t\t\tfilters: [[\"DocType\", \"name\", \"in\", [\"Issue\", \"Quotation\", \"Sales Invoice\", \"Sales Order\"]]]\n\t\t};\n\t};\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quotation",
  "modified": "2021-06-21 13:01:42.328373",
  "name": "Quotation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Quotation', {\n    refresh(frm) {\n        stock_item_filter(frm);\n        tax_template_filter(frm);\n    },\n    \n    before_save(frm) {\n        set_tax_template(frm);\n\t\tassign_sales_person(frm);\n\t\tif (frm.doc.stock_item) {\n\t\t\tfrm.doc.stock_item = undefined;\n\t\t}\n    },\n    \n    before_submit(frm) {\n\t\tset_tax_template(frm);\n\t\tassign_sales_person(frm);\n\t},\n    \n    after_save(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    on_submit(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    on_update(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    after_cancel(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    party_name: function(frm) {\n        set_tax_template(frm);\n    },\n    \n    currency: function(frm) {\n\t\tif (frm.doc.party_name) {\n\t\t\tset_tax_template(frm);\n\t\t}\n    },\n    \n\tsearch: function(frm) {\n\t\tif (frm.doc.stock_item) {\n\t\t\tstock_lookup(frm);\n\t\t} else {\n\t\t\tfrappe.throw(\"You must select a stocked item before performing a stock lookup.\");\n\t\t}\n    }\n});\n\nfunction issue_billing_update(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.update_issue_billing\",\n        args: {\n            docfield: \"quotation\",\n            docname: frm.doc.name,\n            docfield_status: frm.doc.status,\n            issue: frm.doc.issue\n        },\n        callback: function(response) {\n            if (response.message != 1) {\n                frappe.throw(__(\"Error encountered when updating issue.\"));\n            }\n        }\n    });\n}\n\nfunction stock_item_filter(frm) {\n\tfrm.fields_dict.stock_item.get_query = function () {\n\t\treturn {\n\t\t\tfilters: [\n\t\t\t\t[\"Item\", \"is_stock_item\", \"=\", true],\n\t\t\t\t[\"Item\", \"disabled\", \"=\", false],\n\t\t\t],\n\t\t};\n\t};\n}\n\nfunction tax_template_filter(frm) {\n    frm.fields_dict.taxes_and_charges.get_query = function() {\n        return {\n            filters: [\n                [\"Sales Taxes and Charges Template\", \"currency\", \"=\", frm.doc.currency]\n            ]\n        };\n    };\n}\n\nfunction stock_lookup(frm) {\n\tconst table_fields = [\n\t\t{\n\t\t\tfieldname: \"location\", fieldtype: \"Text\",\n\t\t\tin_list_view: 1, label: \"Location\",\n\t\t\toptions: \"Warehouse\", read_only: 1\n\t\t},\n\t\t{\n\t\t\tfieldname: \"quantity\", fieldtype: \"Float\",\n\t\t\tin_list_view: 1, label: \"Quantity\",\n\t\t\tread_only: 1\n\t\t}\n\t];\n\tfrappe.call({\n\t\tmethod: \"eskill_custom.api.stock_lookup\",\n\t\targs: {\n\t\t\tdoctype: frm.doctype,\n\t\t\tuser: frappe.session.user,\n\t\t\titem: frm.doc.stock_item\n\t\t},\n\t\tcallback: function (data) {\n\t\t\tif (data.message) {\n\t\t\t\tconst results = data.message;\n\t\t\t\tconst dialog = new frappe.ui.Dialog({\n\t\t\t\t\ttitle: __(\"Stock Availability\"),\n\t\t\t\t\tstatic: true,\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"item\",\n\t\t\t\t\t\t\tlabel: \"Item\",\n\t\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\t\toptions: \"Item\",\n\t\t\t\t\t\t\tdefault: frm.doc.stock_item,\n\t\t\t\t\t\t\tread_only: 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"sb1\",\n\t\t\t\t\t\t\tfieldtype: \"Section Break\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"currency\",\n\t\t\t\t\t\t\tlabel: \"Currency\",\n\t\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\t\toptions: \"Currency\",\n\t\t\t\t\t\t\tchange: function() {\n\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\tmethod: \"eskill_custom.api.item_price_lookup\",\n\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\tdoctype: frm.doctype,\n\t\t\t\t\t\t\t\t\t\tcurrency: dialog.fields_dict.currency.value,\n\t\t\t\t\t\t\t\t\t\tprice_list: \"Standard Selling\",\n\t\t\t\t\t\t\t\t\t\titem: frm.doc.stock_item\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcallback: function(data) {\n\t\t\t\t\t\t\t\t\t\tif (data.message) {\n\t\t\t\t\t\t\t\t\t\t\tif (data.message == \"Unavailable\") {\n\t\t\t\t\t\t\t\t\t\t\t\tdialog.set_value(\"price\", data.message);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tdialog.set_value(\"price\", data.message[0][0]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tdialog.set_value(\"price\", \"Unavailable\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"cb1\",\n\t\t\t\t\t\t\tfieldtype: \"Column Break\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"price\",\n\t\t\t\t\t\t\tlabel: \"Price\",\n\t\t\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\t\t\tread_only: 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"sb2\",\n\t\t\t\t\t\t\tfieldtype: \"Section Break\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldname: \"stock_levels\",\n\t\t\t\t\t\t\tfieldtype: \"Table\",\n\t\t\t\t\t\t\tlabel: \"Stock Levels\",\n\t\t\t\t\t\t\tcannot_add_rows: true,\n\t\t\t\t\t\t\tin_place_edit: false,\n\t\t\t\t\t\t\tread_only: 1,\n\t\t\t\t\t\t\tdata: results,\n\t\t\t\t\t\t\tfields: table_fields\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tprimary_action: function() {\n\t\t\t\t\t\tdialog.hide();\n\t\t\t\t\t},\n\t\t\t\t\tprimary_action_label: \"Close\"\n\t\t\t\t});\n\t\t\t\tdialog.fields_dict.currency.get_query = function() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t[\"Currency\", \"enabled\", \"=\", true]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdialog.show();\n\t\t\t} else {\n\t\t\t\tfrappe.message(\"There is no available stock.\");\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction set_tax_template(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.sales_invoice_tax\",\n        args: {\n            \"doctype\": frm.doctype,\n            \"currency\": frm.doc.currency,\n            \"customer\": frm.doc.party_name\n        },\n        callback: function (data) {\n            var template = data.message[0][0];\n            if (template) {\n                frappe.run_serially([\n\t\t\t\t\t() => frm.set_value(\"taxes_and_charges\", template),\n\t\t\t\t\t() => frm.trigger(\"taxes_and_charges\")\n\t\t\t\t]);\n            } else {\n                frappe.msgprint(\"No Tax Template was detected.\");\n            }\n        }\n    });\n}\n\nfunction check_save(frm) {\n    if (frm.doc.__unsaved) {\n        frm.save();\n    }\n}\n\nfunction assign_sales_person(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.invoice_sales_person\",\n        args: {\n            user: frappe.session.user,\n            service_invoice: (frm.doc.issue) ? true : false,\n            issue: (frm.doc.issue) ? frm.doc.issue : \"\"\n        },\n        callback: function(response) {\n            frm.clear_table('sales_team');\n            response.message.forEach( function(person) {\n                frm.add_child('sales_team', {\n                    'sales_person': person.sales_person,\n                    'allocated_percentage': person.contribution\n                });\n            });\n            frm.refresh_field('sales_team');\n        }\n    });\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Warranty Swap Out",
  "modified": "2020-11-30 11:25:31.921254",
  "name": "Warranty Swap Out-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Warranty Swap Out', {\n\trefresh(frm) {\n\t    if (!frm.doc.docstatus && frm.doc.serial_no_out && !frm.doc.new_delivery_note) {\n    \t\tfrm.add_custom_button(__(\"Delivery Note\"), function() {\n        \t    const delivery = frappe.model.get_new_doc(\"Delivery Note\");\n    \t        console.log(\"Delivery Note started.\");\n    \t        delivery.naming_series = \"DN.########\";\n    \t        delivery.posting_date = frappe.datetime.nowdate();\n                delivery.company = \"Eskill Trading (Pvt) Ltd\";\n                delivery.customer = frm.doc.customer;\n    \t        var replacement = frappe.model.add_child(delivery, \"Delivery Note Item\", \"items\");\n    \t        frappe.model.with_doc(\"Item\", frm.doc.model_out, function() {\n    \t            var item = frappe.model.get_doc(\"Item\", frm.doc.model_out);\n        \t        replacement.item_code = item.name;\n        \t        replacement.item_name = item.item_name;\n        \t        replacement.description = item.description;\n        \t        replacement.qty = 1;\n        \t        replacement.schedule_date = delivery.schedule_date;\n        \t        replacement.uom = item.stock_uom;\n        \t        replacement.stock_uom = item.stock_uom;\n        \t        replacement.conversion_factor = 1;\n        \t        replacement.serial_no = frm.doc.serial_no_out;\n        \t        replacement.expense_account = \"20400 - Warranty Claims - ET\";\n    \t        });\n    \t        frappe.db.insert(delivery).then( function(note) {\n    \t            frm.doc.new_delivery_note = note.name;\n        \t        frm.save();\n    \t        });\n    \t        console.log(\"Delivery Note created.\");\n    \t\t});\n\t    }\n\t    frm.fields_dict.issue.get_query = function() {\n\t        return {\n\t            filters: [\n\t                ['Issue', \"serial_number\", \"is\", \"set\"]\n                ]\n\t        };\n\t    };\n\t\tfrm.fields_dict.customer.get_query = function() {\n\t\t\treturn{\n\t\t\t\tfilters: [\n\t\t\t\t    ['Customer', 'disabled', '=', false]\n\t\t\t\t]\n\t\t\t};\n\t\t};\n\t\tif (frm.doc.new_delivery_note) {\n\t\t    \n\t\t}\n\t\tclaim_filter(frm);\n\t\tmodel_out_filter(frm);\n\t\tserial_out_filter(frm);\n\t\tproduct_out_read_only(frm);\n\t},\n\t\n\tbefore_submit(frm) {\n\t    if (!frm.doc.new_delivery_note) {\n\t        validated = false;\n\t        frappe.throw(\"Delivery note for outgoing product is required!\");\n\t    }\n\t    if (!frm.doc.serial_no_out) {\n\t        validated = false;\n\t        frappe.throw(\"Serial number for outgoing product is required!\");\n\t    }\n\t},\n\t\n\tcustomer: function(frm) {\n\t    claim_filter(frm);\n\t},\n\t\n\tmodel_in: function(frm) {\n\t    model_out_filter(frm);\n\t},\n\t\n\tmodel_out: function(frm) {\n\t    serial_out_filter(frm);\n\t}\n});\n\nfunction claim_filter(frm) {\n    if (frm.doc.customer) {\n\t\tfrm.fields_dict.warranty_claim.get_query = function() {\n\t\t\treturn{\n\t\t\t\tfilters: [\n\t\t\t\t\t['Warranty Claim', 'customer', '=', frm.doc.customer],\n\t\t\t\t\t['Warranty Claim', 'status', '!=', 'Cancelled']\n\t\t\t\t]\n\t\t\t};\n\t\t};\n    } else {\n\t\tfrm.fields_dict.warranty_claim.get_query = function() {\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t['Warranty Claim', 'status', '!=', 'Cancelled']\n\t\t\t\t]\n\t\t\t};\n\t\t};\n    }\n}\n\nfunction model_out_filter(frm) {\n    if (frm.doc.model_in) {\n        frappe.model.with_doc('Item', frm.doc.model_in, function() {\n            frm.fields_dict.model_out.get_query = function() {\n                return {\n                    filters: [\n                        ['Item', 'item_group', '=', frappe.model.get_doc('Item', frm.doc.model_in).item_group],\n                        ['Item', 'disabled', '=', false]\n                    ]\n                };\n            };\n        });\n    } else {\n        frm.fields_dict.model_out.get_query = function() {\n            return {\n                filters: [\n                    ['Item', 'disabled', '=', false]\n                ]\n            };\n        };\n    }\n}\n\nfunction serial_out_filter(frm) {\n    if (!frm.doc.model_out) {\n        if (frm.doc.serial_no_out) {\n            frm.doc.serial_no_out = undefined;\n        }\n    } else {\n        frm.fields_dict.serial_no_out.get_query = function() {\n            return {\n                filters: [\n                    ['Serial No', 'item_code', '=', frm.doc.model_out],\n                    ['Serial No', 'status', '=', 'Active']\n                ]\n            };\n        };\n    }\n}\n\nfunction product_out_read_only(frm) {\n    if (frm.doc.new_delivery_note) {\n        frm.set_df_property(\"model_out\", \"read_only\", 1);\n        frm.set_df_property(\"serial_no_out\", \"read_only\", 1);\n    }\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Delivery Note",
  "modified": "2021-06-30 12:02:10.771561",
  "name": "Delivery Note-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        tax_template_filter(frm);\n        if (frm.doc.issue && frm.doc.docstatus == 1 && frm.doc.status == \"To Bill\") {\n            setTimeout(() => {\n                frm.remove_custom_button(\"Sales Invoice\", 'Create');\n            }, 500);\n            frm.add_custom_button(__(\"Service Invoice\"), function() {\n                frappe.model.open_mapped_doc({\n                    method: \"eskill_custom.delivery_note.make_service_invoice\",\n                    frm: frm,\n                });\n            }, \"Create\");\n        }\n        if (frm.doc.customer && frm.doc.currency && !frm.doc.taxes_and_charges && !frm.doc.taxes.length) {\n            set_tax_template(frm);\n        }\n    },\n    \n    before_save(frm) {\n        set_tax_template(frm);\n        assign_sales_person(frm);\n    },\n    \n    before_submit(frm) {\n        get_bid_rate(frm);\n        set_tax_template(frm);\n        assign_sales_person(frm);\n    },\n    \n    after_save(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    on_submit(frm) {\n        if (frm.doc.issue){\n            if (!frm.doc.sla_issue && !frm.doc.warranty_issue) {\n                issue_billing_update(frm);\n                quote_ordered(frm);\n                frappe.model.open_mapped_doc({\n                    method: \"eskill_custom.delivery_note.make_service_invoice\",\n                    frm: frm,\n                });\n            } else {\n                service_delivery_unbillable(frm);\n                frm.refresh();\n            }\n        } else {\n            frappe.model.open_mapped_doc({\n                method: \"erpnext.stock.doctype.delivery_note.delivery_note.make_sales_invoice\",\n                frm: frm,\n            });\n        }\n\n    },\n    \n    on_update(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    after_cancel(frm) {\n        if (frm.doc.issue){\n            issue_billing_update(frm);\n        }\n    },\n    \n    customer: function(frm) {\n        set_tax_template(frm);\n    },\n\n    currency: function(frm) {\n        if (frm.doc.customer) {\n            set_tax_template(frm);\n        }\n    }\n});\n\nfunction issue_billing_update(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.update_issue_billing\",\n        args: {\n            docfield: \"delivery_note\",\n            docname: frm.doc.name,\n            docfield_status: frm.doc.status,\n            issue: frm.doc.issue\n        },\n        callback: function(response) {\n            if (response.message != 1) {\n                frappe.throw(__(\"Error encountered when updating issue.\"));\n            }\n        }\n    });\n}\n\nfunction service_delivery_unbillable(frm) {\n    frappe.call({\n        method: \"eskill_custom.delivery_note.set_non_billable_status\",\n        args: {\n            docname: frm.doc.name,\n        },\n        callback: function() {\n            issue_billing_update(frm)\n        }\n    });\n}\n\nfunction tax_template_filter(frm) {\n    frm.fields_dict.taxes_and_charges.get_query = function() {\n        return {\n            filters: [\n                [\"Sales Taxes and Charges Template\", \"currency\", \"=\", frm.doc.currency]\n            ]\n        };\n    };\n}\n\nfunction set_tax_template(frm) {\n    if (!frm.doc.sla_issue && !frm.doc.warranty_issue) {\n        frappe.call({\n            method: \"eskill_custom.api.sales_invoice_tax\",\n            args: {\n                \"doctype\": frm.doctype,\n                \"currency\": frm.doc.currency,\n                \"customer\": frm.doc.customer\n            },\n            callback: function (data) {\n                var template = data.message[0][0];\n                if (template) {\n                    frappe.run_serially([\n                        () => frm.set_value(\"taxes_and_charges\", template),\n                        () => frm.trigger(\"taxes_and_charges\")\n                    ]);\n                } else {\n                    frappe.msgprint(\"No Tax Template detected.\");\n                }\n            }\n        });\n    }\n}\n\nfunction quote_ordered(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.service_quote_ordered\",\n        args: {\n            issue: frm.doc.issue\n        },\n        callback: function(response) {\n            if (response.message != 1) {\n                frappe.throw(__(\"Error encountered when updating quote status.\"));\n            }\n        }\n    });\n}\n\nfunction assign_sales_person(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.invoice_sales_person\",\n        args: {\n            user: frappe.session.user,\n            service_invoice: (frm.doc.issue) ? true : false,\n            issue: (frm.doc.issue) ? frm.doc.issue : \"\"\n        },\n        callback: function(response) {\n            frm.clear_table('sales_team');\n            response.message.forEach( function(person) {\n                frm.add_child('sales_team', {\n                    'sales_person': person.sales_person,\n                    'allocated_percentage': person.contribution\n                });\n            });\n            frm.refresh_field('sales_team');\n        }\n    });\n}\n\nfunction get_bid_rate(frm) {\n    if (frm.doc.currency == \"USD\") {\n        frappe.call({\n            method: \"eskill_custom.api.auction_rate_lookup\",\n            args: {\n                posting_date: frm.doc.posting_date\n            },\n            callback: function(data) {\n                frm.set_value(\"auction_bid_rate\", data.message);\n            }\n        });\n        console.log(\"Got bid rate.\");\n    }\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Payment Entry",
  "modified": "2021-06-24 11:11:08.492939",
  "name": "Payment Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Payment Entry', {\n\trefresh(frm) {\n\t\tname_series(frm);\n\t\tparty_filter(frm);\n\t},\n\t\n\tbefore_save(frm) {\n\t    get_bid_rate(frm);\n\t},\n\t\n\tpayment_type: function(frm) {\n\t    name_series(frm);\n\t}\n});\n\nfunction name_series(frm) {\n    if (frm.doc.payment_type == \"Receive\") {\n        frm.set_value('naming_series', \"REC.########\");\n        frm.set_df_property('naming_series', 'read_only', 1);\n    } else if (frm.doc.payment_type == \"Pay\") {\n        frm.set_value('naming_series', \"PYE.########\");\n        frm.set_df_property('naming_series', 'read_only', 1);\n    }\n}\n\nfunction party_filter(frm) {\n\tfrm.fields_dict.party_type.get_query = function() {\n\t\treturn {\n\t\t\tfilters: [\n\t\t\t\t[\"DocType\", \"name\", \"in\", [\"Customer\", \"Supplier\", \"Employee\", \"Shareholder\"]],\n\t\t\t],\n\t\t};\n\t};\n}\n\nfunction get_bid_rate(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.auction_rate_lookup\",\n        args: {\n            posting_date: frm.doc.posting_date\n        },\n        callback: function(data) {\n            console.log(data)\n            frm.set_value(\"auction_bid_rate\", data.message);\n        }\n    });\n    console.log(\"Got bid rate.\");\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Landed Cost Voucher",
  "modified": "2021-06-25 11:15:35.265020",
  "name": "Landed Cost Voucher-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Landed Cost Voucher', {\n\tbefore_save(frm) {\n\t\tget_bid_rate(frm);\n\t}\n});\n\nfunction get_bid_rate(frm) {\n    frappe.call({\n        method: \"eskill_custom.api.auction_rate_lookup\",\n        args: {\n            posting_date: frm.doc.posting_date\n        },\n        callback: function(data) {\n            frm.set_value(\"auction_bid_rate\", data.message);\n        }\n    });\n    console.log(\"Got bid rate.\");\n}\n"
 }
]