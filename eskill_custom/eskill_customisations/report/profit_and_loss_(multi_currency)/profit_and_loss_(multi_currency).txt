# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
# License: GNU General Public License v3. See license.txt

from __future__ import unicode_literals
import frappe
from frappe import _
from frappe.utils import flt
from erpnext.accounts.report.financial_statements import (get_period_list, get_columns, get_data)

def execute(filters=None):
	error, columns, pos_dict = 0, ["Accounts"], {}

	try:
		error, periods, pos_dict = get_periods(filters)
		columns.extend(periods)

		if error != 0:
			frappe.throw(_("Start date can not precede end date."))
	except Exception as error_msg:
		frappe.throw(_("There is has been an issue with generating column headers."))
		frappe.throw(_("{}".format(error_msg)))
	
	income = get_income(filters=filters, columns=columns)

	expense = get_data(filters.company, "Expense", "Debit", period_list, filters=filters,
		accumulated_values=filters.accumulated_values,
		ignore_closing_entries=True, ignore_accumulated_values_for_fy= True)

	net_profit_loss = get_net_profit_loss(income, expense, period_list, filters.company, filters.presentation_currency)

	data = []
	data.extend(income or [])
	data.extend(expense or [])
	if net_profit_loss:
		data.append(net_profit_loss)

	columns = get_columns(filters.periodicity, period_list, filters.accumulated_values, filters.company)

	chart = get_chart_data(filters, columns, income, expense, net_profit_loss)

	return columns, data, None, chart


def get_periods(filters):
	"Define periods and return columns for report."

	periods = frappe.db.sql(f"select month('{filters['start_date']}') start_m, year('{filters['start_date']}') start_y, month('{filters['end_date']}') end_m, year('{filters['end_date']}') end_y;", as_dict=1)[0]
	period_columns = []
	if filters['start_date'] > filters['end_date']:
		return 1, [], {}
	elif filters['periodicity'] == "Yearly":
		for i in range(periods[3] - periods['start_y'] + 1):
			period_columns.extend([f"{periods['start_y'] + i} - USD", f"{periods['start_y'] + i} - ZWL"])
	elif filters['periodicity'] == "Monthly":
		if periods['start_m'] == periods['end_m'] and periods['start_y'] == periods['end_y']:
			period_columns.extend(frappe.db.sql(f"select concat(monthname('{filters['start_date']}'), ' ', year('{filters['start_date']}'), ' (USD)'), "\
				f"concat(monthname('{filters['start_date']}'), ' ', year('{filters['start_date']}'), ' (ZWL)')")[0])
		else:
			period_columns.extend(frappe.db.sql(f"select concat(monthname('{filters['start_date']}'), ' ', year('{filters['start_date']}'), ' (USD)'), "\
				f"concat(monthname('{filters['start_date']}'), ' ', year('{filters['start_date']}'), ' (ZWL)'), "\
				f"concat(monthname('{filters['end_date']}'), ' ', year('{filters['end_date']}'), ' (USD)'), "\
				f"concat(monthname('{filters['end_date']}'), ' ', year('{filters['end_date']}'), ' (ZWL)')")[0])
	return 0, period_columns, {}


def get_headers(account_type: str, filters, period_length: str):
	"Return account parents."
	
	headers = []

	headers.extend(frappe.db.sql("select A.parent_account from `tabGL Entry` GLE "\
		"join tabAccount A on GLE.account = A.name "\
		f"where A.account_type = '{account_type} Account' and {period_length} "\
		"group by A.parent_account")[0])

	frappe.throw(_("{}".format(headers)))

	return headers


def get_income(filters, columns: list):
	"Returns income accounts."

	income = []

	frappe.throw(_("{}".format(len(columns))))

	if filters['periodicity'] == "Monthly":
		if len(columns) == 3:
			date_range = f"(month(posting_date) = month('{filters['start_date']}') and year(posting_date) = year('{filters['start_date']}'))"
		else:
			date_range = f"((month(posting_date) = month('{filters['start_date']}') and year(posting_date) = year('{filters['start_date']}'))"\
				f" or (month(posting_date) = month('{filters['end_date']}') and year(posting_date) = year('{filters['end_date']}')))"
	else:
		if len(columns) == 3:
			date_range = f"year(posting_date) = year('{filters['start_date']}')"
		else:
			date_range = f"(year(posting_date) = year('{filters['start_date']}') or year(posting_date) = year('{filters['end_date']}'))"

	income_headers = get_headers(account_type="Income", filters=filters, period_length=date_range)

	
	return income


def get_net_profit_loss(income, expense, period_list, company, currency=None, consolidated=False):
	total = 0
	net_profit_loss = {
		"account_name": "'" + _("Profit for the year") + "'",
		"account": "'" + _("Profit for the year") + "'",
		"warn_if_negative": True,
		"currency": currency or frappe.get_cached_value('Company',  company,  "default_currency")
	}

	has_value = False

	for period in period_list:
		key = period if consolidated else period.key
		total_income = flt(income[-2][key], 3) if income else 0
		total_expense = flt(expense[-2][key], 3) if expense else 0

		net_profit_loss[key] = total_income - total_expense

		if net_profit_loss[key]:
			has_value=True

		total += flt(net_profit_loss[key])
		net_profit_loss["total"] = total

	if has_value:
		return net_profit_loss

def get_chart_data(filters, columns, income, expense, net_profit_loss):
	labels = [d.get("label") for d in columns[2:]]

	income_data, expense_data, net_profit = [], [], []

	for p in columns[2:]:
		if income:
			income_data.append(income[-2].get(p.get("fieldname")))
		if expense:
			expense_data.append(expense[-2].get(p.get("fieldname")))
		if net_profit_loss:
			net_profit.append(net_profit_loss.get(p.get("fieldname")))

	datasets = []
	if income_data:
		datasets.append({'name': _('Income'), 'values': income_data})
	if expense_data:
		datasets.append({'name': _('Expense'), 'values': expense_data})
	if net_profit:
		datasets.append({'name': _('Net Profit/Loss'), 'values': net_profit})

	chart = {
		"data": {
			'labels': labels,
			'datasets': datasets
		}
	}

	if not filters.accumulated_values:
		chart["type"] = "bar"
	else:
		chart["type"] = "line"

	chart["fieldtype"] = "Currency"

	return chart